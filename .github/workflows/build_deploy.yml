# Runs all project tests, build process and deployment to hosting env
# triggered by GH Deployment event
name: "Build & Deploy"

on: deployment

permissions: write-all

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Update GH Deployment status to "in progress"
        id: create_in_progress_status
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.repos.createDeploymentStatus({
              deployment_id: "${{ github.event.deployment.id }}",
              environment: "${{ github.event.deployment.environment }}",
              log_url: "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}",
              description: "starting CI/CD run",
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: "in_progress"
            })

      - name: Checkout
        uses: actions/checkout@v3

      - name: Run Jekyll build
        uses: actions/jekyll-build-pages@v1.0.6
        with:
          token: ${{ secrets.GH_TOKEN }}
          source: ./docs/

      - name: Archive build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: snipflow-${{ github.event.deployment.environment }}-${{ github.event.deployment.id }}
          path: ./_site/*

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Get Project ENV vars
        uses: ./.github/actions/setvars

      - name: Get Artifact URL
        run: |
          ARCHIVE_URL=$(curl \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ env.GH_TOKEN }}" \
            https://api.github.com/repos/marcelkornblum/snipflow/actions/artifacts?name=snipflow-${{ github.event.deployment.environment }}-${{ github.event.deployment.id }} | jq ".artifacts[0].archive_download_url")
          echo "ARCHIVE_URL=${ARCHIVE_URL}" >> $GITHUB_ENV

      - name: Set AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy to AWS Amplify
        run: |
          # if we're on a PR environment, it may not exist on AWS yet
          if [[ "${{ github.event.deployment.environment }}" =~ ^pr[0-9]*$ ]]; then
            GET_PR_ENV_CMD=$(aws amplify get-branch \
              --app-id "${{ env.AMPLIFY_APPID }}" \
              --branch-name "${{ github.event.deployment.environment }}")

            if (( $? != 0 )); then
              echo "creating Amplify environment ${{ github.event.deployment.environment }}"
              aws amplify create-branch --app-id "${{ env.AMPLIFY_APPID }}" --branch-name "${{ github.event.deployment.environment }}"
            fi
          fi

          echo "deploying to ${{ github.event.deployment.environment }} using ${ARCHIVE_URL}"

          DEPLOY_CMD=$(aws amplify start-deployment \
            --app-id "${{ env.AMPLIFY_APPID }}" \
            --branch-name "${{ github.event.deployment.environment }}" \
            --source-url "${ARCHIVE_URL}")

          echo $DEPLOY_CMD

          DEPLOY_CMD=$(aws amplify start-deployment \
            --app-id "${{ env.AMPLIFY_APPID }}" \
            --branch-name "preview" \
            --source-url "${ARCHIVE_URL}")

          echo $DEPLOY_CMD

      - name: Get ENV URL for GH Deployment update
        run: |
          if [[ "${{ github.event.deployment.environment }}" == "preview" ]]; then
            echo "ENV_URL=${{ env.ENV_URL_PREVIEW }}" >> $GITHUB_ENV
          elif [[ "${{ github.event.deployment.environment }}" == "staging" ]]; then
            echo "ENV_URL=${{ env.ENV_URL_STAGING }}" >> $GITHUB_ENV
          elif [[ "${{ github.event.deployment.environment }}" == "production" ]]; then
            echo "ENV_URL=${{ env.ENV_URL_PRODUCTION }}" >> $GITHUB_ENV
          fi

      - name: Update GH Deployment status to "success"
        id: create_success_status
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.repos.createDeploymentStatus({
              deployment_id: "${{ github.event.deployment.id }}",
              environment: "${{ github.event.deployment.environment }}",
              environment_url: "${{ env.ENV_URL }}",
              log_url: "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}",
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: "success"
            })

      - name: Update GH Deployment status to "failure"
        id: create_failed_status
        if: ${{ failure() }}
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.repos.createDeploymentStatus({
              deployment_id: "${{ github.event.deployment.id }}",
              environment: "${{ github.event.deployment.environment }}",
              log_url: "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}",
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: "failure"
            })
